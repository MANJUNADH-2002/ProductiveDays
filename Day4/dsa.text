Graphs:
Directed ANd Undirected
Cycled AND Uncycled
--> Nodes(Vertices) And Edges

--->Graph is  represented As 

-->Adjency Matrix
-->Adjency List 

For Undirected Graph 
--->The Space Complexity OF Adjency List is 2(No.of.Edges)  //It is For Directed Graph 
--->The Space Complexity Of Adjency List is (Ne) // It Is For Directed Graph 

Degree iN graph :Number OPf Edges Come In And Comeout Of Edge 

Property :The total degree of a graph-->2*Number OF Edges


Graph Represemstation In JavA::


package GraphImplimentation;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Graph {
 private Map<Integer,List<Integer>> adjList;
 public Graph() {
	 adjList=new HashMap<>();
 }
 public void addVertex(int v) {
	 adjList.putIfAbsent(v,new ArrayList<>());
 }
 public void addEdge(int v,int u) {
	 adjList.get(v).add(u);
	  // For undirected: adjList.get(v).add(u); u should also add

 }
 public void printGraph() {
	 for(int v:adjList.keySet()) {
		 System.out.print(v+" -->");
		 for(int u:adjList.get(v)) {
			 System.out.print(u+" -->");
		 }
		 System.out.println();
		 
	 }
 }
 
 }

 Runner.java 

 package GraphImplimentation;

public class Runner {

	public static void main(String[] args) {
		Graph graph=new Graph();
		graph.addVertex(1);
		graph.addVertex(2);
		graph.addVertex(3);
		graph.addVertex(4);
		graph.addEdge(1, 3);
		graph.addEdge(1, 2);
		graph.addEdge(2, 4);
		graph.addEdge(4, 3);
		graph.printGraph();
	}

}



----------------------------------------------------------------------------------------------------------------------

Traversal In Graphs:

Breadth First Search  :
Deptbh First Search  :


Breadth First Search ::

"Breadth-First Search (BFS) is a graph traversal algorithm where we explore nodes level by level ‚Äî starting from a source node, we visit all its immediate neighbors first (level 1), then their neighbors (level 2), and so on.

To implement BFS, we use:

A queue to store the nodes to visit (FIFO),

A visited list or set to avoid revisiting the same nodes.

The process goes like this:

Add the starting node to the queue and mark it as visited.

While the queue is not empty:

Dequeue the front node.

Visit all its unvisited neighbors.

Add those neighbors to the queue and mark them as visited.

This continues until the queue is empty. This way, we traverse the graph in the order of increasing distance from the start node."**

üîÅ You can also mention:
BFS is great for finding the shortest path in unweighted graphs.

It's implemented using Queue (unlike DFS which uses Stack or recursion).

üß† Example (Optional):
For example, if I start from node 1, I‚Äôll first visit its neighbors like 2 and 3, then I‚Äôll explore the neighbors of 2 and 3, and so on.