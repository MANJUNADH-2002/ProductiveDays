----------Greedy Algorithm----------------------
Solving Problem By Findinf Better Path At Each With Out Thinking About Global Approadchb 

Assign Cookies (Leet code Assign Cookies 455){

Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.

Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.

 

Example 1:

Input: g = [1,2,3], s = [1,1]
Output: 1
Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 
And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.
You need to output 1.
Example 2:

Input: g = [1,2], s = [1,2,3]
Output: 2
Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. 
You have 3 cookies and their sizes are big enough to gratify all of the children, 
You need to output 2.
 

Constraints:

1 <= g.length <= 3 * 104
0 <= s.length <= 3 * 104
1 <= g[i], s[j] <= 231 - 1


Solution...
(Greddy AAlogorithm)

class Solution {
    public int findContentChildren(int[] g, int[] s) {
    Arrays.sort(g); //0(logn)
    Arrays.sort(s);   //o(2logn)
    if(g.length==0 ||s.length==0){
        return 0;
    }
    int point1=0;
    int point2=0;
    int count1=0;
    while(point1<g.length && point2<s.length){
        if(s[point2]>=g[point1]){
        point1++;
        point2++;
        count1++;
        }
        else{
          point2++;
        }
    }
    ///o(s)
    //total complexity(o2logn +o(n))
    return count1;
    }
}
}
----------------------------------------------------------------------------------------------------
LeetCode 860(Lemonade change)

860. Lemonade Change
Solved
Easy
Topics
premium lock icon
Companies
At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.

Note that you do not have any change in hand at first.

Given an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.

 

Example 1:

Input: bills = [5,5,5,10,20]
Output: true
Explanation: 
From the first 3 customers, we collect three $5 bills in order.
From the fourth customer, we collect a $10 bill and give back a $5.
From the fifth customer, we give a $10 bill and a $5 bill.
Since all customers got correct change, we output true.
Example 2:

Input: bills = [5,5,10,10,20]
Output: false
Explanation: 
From the first two customers in order, we collect two $5 bills.
For the next two customers in order, we collect a $10 bill and give back a $5 bill.
For the last customer, we can not give the change of $15 back because we only have two $10 bills.
Since not every customer received the correct change, the answer is false.


Solution:

class Solution {
    public boolean lemonadeChange(int[] bills) {
        int count5=0;
        int count10=0;
        boolean satisfied=true;
        for(int i=0;i<bills.length;i++){
            if(bills[i]==5){
                count5++;
            }
            else if(bills[i]==10){
                if(count5>0){
                count5--;
                count10++;
                }
                else{
                    return false;
                }
            }
            else{
                if(count5>0 && count10>0){
                count5--;
                count10--;
                }
                else if(count5>2){
                    count5=count5-3;
                }
                else{
                    return false;
                }
            }   
        }
        return satisfied;
    }
}
--------------------------------------------------------------------------------------------
Shortest Job First ()

import java.util.Arrays;

public class SJF_Simple {
    public static void main(String[] args) {
        int[] jobs = {5, 3, 8, 6}; // burst times

        Arrays.sort(jobs); // sort for SJF

        int totalWaitingTime = 0;
        int waitingTime = 0;

        for (int i = ; i < jobs.length; i++) {
            totalWaitingTime += waitingTime;
            waitingTime += jobs[i];
        }

        double avgWaitingTime = (double) totalWaitingTime / jobs.length;

        System.out.println("Average Waiting Time: " + avgWaitingTime);
    }
}
---------------------------------------------------------------------------------------------
